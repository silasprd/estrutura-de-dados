Seleção
Realiza um busca em todo o vetor comparando e encontrando o maior valor, ao encontrar o maior valor posiciona ele no ultimo elemento da lista, e assim por diante posicionando sempre na posição (n-1). Necessário 2 algoritmos, 1 para percorrer e o outro para ordenar na posição correta.


Inserção
é ruim quando está ordenado de trás para frente, mas é bom quando está ordenado.
GAP = 4 - saltos utilizado para comparar os elementos da lista, pega o primeiro e compara com o elemento 4 posições a frente. Em seguida utiliza um GAP menor(ex.: 2), pega a nova lista ordenada com GAP e realiza a comparação com GAP = 2. E então diminui o GAP novamente para 1 e realiza a comparação novamente.


Shell Sort
é ruim quando está ordenado de trás para frente, mas é bom quando está ordenado.
GAP = 4 - saltos utilizado para comparar os elementos da lista, pega o primeiro e compara com o elemento 4 posições a frente. Em seguida utiliza um GAP menor(ex.: 2), pega a nova lista ordenada com GAP e realiza a comparação com GAP = 2. E então diminui o GAP novamente para 1 e realiza a comparação novamente.


Quick Sort
Separa vetores em menores a esquerda e maiores a direita.
criar 2 variaveis de contador com valor 0, uma usada para contar e outra para marcar o último maior valor encontrado. começa comparando o ultimo elemento com o indice 0.


Merge Sort
2 index (i, j)
Acha o meio do vetor e divide em 2 vetores, depois pega o lado esquerdo e divide o vetor até restar 1 elemento, compara com a instância anterior(que tinha 2 elementos) e ordena esses 2 elementos e teremos um primeiro vetor ja ordenado com 2 posições, em seguida vai voltando as instâncias, comparando e ordenando.
eu adiciono 1 ao contador que tiver o número menor.
Se em uma instância tiver + de 1 valor, você continua separando este vetor da instância até restar 1 posição para cada lado. 
A comparação só rola após termos 1 vetor ordenado.


Ordenação por inserção: Nesse algoritmo, os elementos são percorridos um por um, começando do segundo elemento até o último. Em cada iteração, o elemento atual é comparado com os elementos anteriores e movido para a posição correta, deslocando os elementos maiores uma posição à direita. Esse processo é repetido até que todos os elementos estejam na posição correta. A ordenação por inserção é semelhante a como você ordenaria um baralho de cartas em suas mãos.

Ordenação por seleção: Nesse algoritmo, em cada iteração, é identificado o menor elemento restante no vetor não ordenado e é trocado com o elemento na posição atual. Essa abordagem garante que, a cada iteração, o menor elemento seja colocado na posição correta. O processo de seleção do menor elemento é repetido até que todo o vetor esteja ordenado. A ordenação por seleção é semelhante a como você selecionaria a menor carta de um baralho e a colocaria em uma pilha separada.